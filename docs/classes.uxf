<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>lt=&lt;&lt;-</help_text><element><id>UMLClass</id><coordinates><x>230</x><y>150</y><w>280</w><h>280</h></coordinates><panel_attributes>/DirTree/
--

- id : int
- name : str
- path : str
- parent : DirTree

--

+ &lt;&lt;constructor&gt;&gt; DirTree ( name : str, path : str, 
                                         parent : DirTree )
+getName( ) : str
+getPath( ) : str
+getParent( ) : DirTree
+getId ( ) : int
+getType( ) : DirTreeType
+isLeaf ( i : DirTree ) : bool
+isRoot ( i : DirTree ) : bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>110</x><y>490</y><w>140</w><h>70</h></coordinates><panel_attributes>File
--
- content : str
--
+ getContent ( ) : str</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>240</x><y>420</y><w>70</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>50;10;50;100;10;100</additional_attributes></element><element><id>UMLClass</id><coordinates><x>370</x><y>490</y><w>210</w><h>80</h></coordinates><panel_attributes>Directory
--
- childrens : DirTree [ * ]
--
- getChildrens ( ) : DirTree [ * ]</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>330</x><y>420</y><w>60</w><h>120</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;100;40;100</additional_attributes></element><element><id>Relation</id><coordinates><x>500</x><y>200</y><w>50</w><h>310</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes><additional_attributes>30;290;30;10;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>830</x><y>0</y><w>270</w><h>470</h></coordinates><panel_attributes>/ProjectTree/
--

- id : int
- name : str
- parent : ProjectTree
- childrens : ProjectTree [ * ]

--

+ &lt;&lt;constructor&gt;&gt; ProjectTree ( id : int, name : str,
                                         parent : ProjectTree)

+ getName( ) : str
+ getParent( ) : ProjectTree
+ getId ( ) : int
+ getType( ) : ProjectTreeType
+ getChildrens ( ) : ProjectTree [ * ]
+ getChildrenAt ( id : int ) : ProjectTree

+ setName ( name : str ) : void
+ setParent ( parent : ProjectTree ) : void
+ setChildrens ( childrens : ProjectTree ) : void

+ addChildren ( children : ProjectTree ) : bool

+ isLeaf ( ) : bool
+ isRoot ( ) : bool
+ isClass ( ) : bool
+ isInnerClass ( ) : bool
+ isPackage ( ) : bool
+ isSubPackage ( ) : bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>620</x><y>540</y><w>360</w><h>680</h></coordinates><panel_attributes>Package
--

- childrens : ProjectTree [ * ]

--

+ &lt;&lt;constructor&gt;&gt; Package ( id : int, name : str, parent : Package,
                      childrens : ProjectTree [ * ] )
+ &lt;&lt;constructor&gt;&gt; Package ( id : int, name : str, parent : Package )
+ &lt;&lt;constructor&gt;&gt; Package ( id : int, name : str )

+ getChildrens ( ) : ProjectTree [ * ]
+ getChildrenAt ( index : int ) : ProjectTree
+ getChildrenNamed ( name : str ) : ProjectTree
+ getClasses ( ) : Class [ * ]
+ getClassAt ( index : int ) : Class
+ getClassNamed ( name : str ) : Class
+ getSubpackages ( ) : Package [ * ]
+ getSubPackageAt ( index : int ) : Package
+ getSubPackageNamed ( name : str ) : Package

+ setChildrens ( childrens : ProjectTree [ * ] ) : void
+ addChildren ( children : ProjectTree ) : bool
+ addClass ( class : Class ) : bool
+ addSubPackage ( package : Package ) : bool

+ isLeaf ( ) : bool
+ isRoot ( ) : bool
+ isClass ( ) : bool
+ isInnerClass ( ) : bool
+ isPackage ( ) : bool
+ isSubPackage ( ) : bool

+ searchSubPackage ( ) : Package
+ searchClass ( ) : Class

+ removeChildren ( ) : void
+ reemoveIfEmpty ( ) : void</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>860</x><y>460</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>750</x><y>180</y><w>100</w><h>380</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-&gt;</panel_attributes><additional_attributes>10;360;10;10;80;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>990</x><y>540</y><w>390</w><h>850</h></coordinates><panel_attributes>Class
--

- attributes : ClassAttributes [ * ]
- methods : ClassMethods [ * ]
- innerClasses : Class [ * ]
- implements : Class [ * ]
- extends : Class
- access : AccessType
- type : ClassType

--

+ &lt;&lt;constructor&gt;&gt; Class ( id : int, name : str, parent : ProjectTree, 
                      access : AccessType, attributes : ClassAttributes [ * ], 
                      methods : ClassMethods [ * ], innerClasses : Class [ * ], 
                      implements : Class [ * ], extends : Class)
+ &lt;&lt;constructor&gt;&gt; Class ( id : int, name : str )


+ getAtributes ( ) : ClassAttributes [ * ]
+ getAttributeNamed ( name : str ) : ClassAttribute
+ getMethods ( ) : ClassMethods [ * ]
+ getMethodNamed ( name : str ) : ClassMethod
+ getInnerClasses ( ) : Class [ * ]
+ getInnerClassNamed ( name : str )
+ getAccess ( ) : AccessType
+ getType ( ) : ClassType

+ implements ( ) : Class [ * ]
+ ImplementOf ( class : Class ) : bool
+ implementOf ( class : Class [ * ] ) : bool

+ extends ( ) : Class
+ extendOf ( class : Class ) : bool

+ isLeaf ( ) : bool
+ isRoot ( ) : bool
+ isClass ( ) : bool
+ isInnerClass ( ) : bool
+ isPackage ( ) : bool
+ isSubPackage ( ) : bool

+ setAccess ( access : AccessType ) : void
+ setAttributes ( attributes : ClassAttribute [ * ] ) : void
+ setMethods ( method : ClassMethod [ * ] ) : void
+ setInnerClasses ( innerClasses : Class [ * ] ) : void
+ setSuperclass ( superclass : Class ) : void
+ setInterfaces ( interfaces : Class [ * ] ) : void

+ addAttribute ( attribute : ClassAttribute ) : bool
+ addAttribute (  name : str, type : AttributeType, 
                           access : AccessType ) : bool
+ addMethod ( method : ClassMethod ) : bool
+ addClass (class : Class ) : bool
+ addInterface ( class : Class ) : bool

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1000</x><y>460</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>1280</x><y>490</y><w>160</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes><additional_attributes>100;130;140;130;140;10;10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>980</x><y>1460</y><w>350</w><h>250</h></coordinates><panel_attributes>ClassAttribute
--

- name : str
- type : Type
- access : AccessType
- parentClass : Class

--

+ &lt;&lt;constructor&gt;&gt; ClassAttribute ( name : str, type : AttributeType, 
                    access : AccessType, parentClass : Class )

+ getName ( ) : str
+ getType ( ) : Type
+ getAccess ( ) : AccessType
+ getParentClass ( ) : Class</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1150</x><y>1380</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=(+)-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1460</x><y>890</y><w>360</w><h>640</h></coordinates><panel_attributes>ClassMethod
--

- name : str
- returnType : str
- access : AccessType
- abstract : bool
- empty : bool
- parameters : Parameter [ .. ]
- parentClass : Class
- methodsCalled : ( int, ClassMethod ) [ .. ]

--

+ &lt;&lt;constructor&gt;&gt; ClassMethod ( name : str, returnType : Type, 
                    access : AccessType, abstract : bool, empty : bool
                    parameters : Parameters [ .. ], parentClass : Class )
+ &lt;&lt;constructor&gt;&gt;ClassMethod ( name : str )

+ getName ( ) : str
+ getReturnType ( ) : Type
+ getAccess ( ) : AccessType
+ getParameters ( ) : Parameters [ .. ]
+ getParentClass ( ) : Class
+ getMethodsCalled ( ) : ( int, ClassMethod ) [ .. ]
+ getMethodsOrderer ( ) : ClassMethod [ .. ]
+ getMethod ( position : int ) : ClassMethod
+ isAbstract ( ) : bool
+ isEmpty ( ) : bool

+ setName ( name : str ) : void
+ setParent ( parent : Class ) : void
+ setReturnType ( returnType : Type ) : void
+ setAccess ( access : AccessType ) : void
+ setParameters ( parameters : Parameters [ .. ]  ) : void
+ addParameter ( parameter : Parameter ) : void
+ setMethods ( methods : ClassMethod [ .. ] ) : void

+ addMethod ( method : ClassMethod ) : void
+ setAsAbstract ( ) : void
+ setAsEmpty ( ) : void
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1370</x><y>1020</y><w>110</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;</panel_attributes><additional_attributes>10;10;90;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1440</x><y>720</y><w>100</w><h>130</h></coordinates><panel_attributes>&lt;&lt;Enum&gt;&gt;
ClassType
--

_+ CLASS_
_+ ABSTRACT_
_+ INTERFACE_
_+ ENUM_</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1350</x><y>1560</y><w>140</w><h>130</h></coordinates><panel_attributes>&lt;&lt;Enum&gt;&gt;
AccessType
--

_+ PUBLIC_
_+ PROTECTED_
_+ PACKAGE_
_+ PRIVATE_</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>220</y><w>150</w><h>150</h></coordinates><panel_attributes>DirTreeIterator
--

treeList : DirTree [ * ]

--

- deepFirst ( DirTree )
+ next ( ) : DirTree
+ hasNext ( ) : bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1370</x><y>740</y><w>90</w><h>30</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>70;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1360</x><y>1380</y><w>30</w><h>200</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;180;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1320</x><y>1600</y><w>50</w><h>30</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>30;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1400</x><y>1460</y><w>80</w><h>120</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;100;10;10;60;10</additional_attributes></element><element><id>UMLInterface</id><coordinates><x>790</x><y>1420</y><w>80</w><h>100</h></coordinates><panel_attributes>Interface
--
Operation1
Operation2</panel_attributes><additional_attributes></additional_attributes></element></diagram>