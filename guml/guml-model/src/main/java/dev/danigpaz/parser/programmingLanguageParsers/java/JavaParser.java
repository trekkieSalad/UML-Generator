
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dev.danigpaz.parser.programmingLanguageParsers.java;

import java_cup.runtime.*;
import dev.danigpaz.parser.ProjectTreeAdapter;
import dev.danigpaz.parser.ProgrammingLanguageParser;
import dev.danigpaz.projectTree.concreteProjectTreeNodes.classElementProperties.ModifierType;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaParser extends java_cup.runtime.lr_parser implements ProgrammingLanguageParser{

 public final Class getSymbolContainer() {
    return JavaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\004\000\002\005\003\000" +
    "\002\006\006\000\002\006\005\000\002\006\004\000\002" +
    "\010\005\000\002\010\004\000\002\017\004\000\002\017" +
    "\003\000\002\025\004\000\002\025\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\021\006" +
    "\000\002\021\004\000\002\021\004\000\002\020\005\000" +
    "\002\020\003\000\002\011\004\000\002\011\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\005" +
    "\000\002\032\005\000\002\032\004\000\002\032\004\000" +
    "\002\032\003\000\002\033\007\000\002\034\007\000\002" +
    "\034\006\000\002\022\007\000\002\022\006\000\002\022" +
    "\006\000\002\022\005\000\002\022\004\000\002\026\003" +
    "\000\002\026\004\000\002\026\003\000\002\026\004\000" +
    "\002\026\003\000\002\026\004\000\002\007\005\000\002" +
    "\007\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\012\006\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\027\004\000\002\027\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\004\000\002" +
    "\031\003\000\002\031\004\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\171\000\042\004\005\005\031\006\010\007\025\010" +
    "\024\013\015\024\016\025\011\026\021\027\020\030\023" +
    "\031\027\032\017\033\022\034\030\035\012\001\002\000" +
    "\042\004\ufff0\006\ufff0\007\ufff0\010\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\040\ufff0\001\002\000\004\022\173" +
    "\001\002\000\034\006\010\007\025\010\024\024\016\025" +
    "\011\026\021\027\020\030\023\031\027\032\017\033\022" +
    "\034\030\035\012\001\002\000\004\036\160\001\002\000" +
    "\004\036\uffe5\001\002\000\042\004\uffed\006\uffed\007\uffed" +
    "\010\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed" +
    "\001\002\000\042\004\uffe8\006\uffe8\007\uffe8\010\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\001\002\000" +
    "\004\036\ufff2\001\002\000\042\004\005\005\031\006\ufffd" +
    "\007\ufffd\010\ufffd\013\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\001\002\000\036\006\010\007\025\010\024\013\015\024" +
    "\016\025\011\026\021\027\020\030\023\031\027\032\017" +
    "\033\022\034\030\035\012\001\002\000\042\004\uffef\006" +
    "\uffef\007\uffef\010\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036" +
    "\uffef\040\uffef\001\002\000\042\004\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7" +
    "\001\002\000\042\004\uffeb\006\uffeb\007\uffeb\010\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\001\002\000" +
    "\042\004\uffee\006\uffee\007\uffee\010\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\040\uffee\001\002\000\042\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\040\uffe6\001\002\000\042\004\uffea\006\uffea\007" +
    "\uffea\010\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\040" +
    "\uffea\001\002\000\004\036\uffe3\001\002\000\004\036\uffe4" +
    "\001\002\000\004\014\042\001\002\000\042\004\uffec\006" +
    "\uffec\007\uffec\010\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\040\uffec\001\002\000\042\004\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9" +
    "\001\002\000\004\022\041\001\002\000\036\006\010\007" +
    "\025\010\024\013\015\024\016\025\011\026\021\027\020" +
    "\030\023\031\027\032\017\033\022\034\030\035\012\001" +
    "\002\000\004\002\037\001\002\000\040\002\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\013\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\001\002\000\040\002\uffff\006\010\007\025\010\024\013" +
    "\015\024\016\025\011\026\021\027\020\030\023\031\027" +
    "\032\017\033\022\034\030\035\012\001\002\000\040\002" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\013\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\001\002\000\004\002\001\001\002\000\040" +
    "\002\000\006\010\007\025\010\024\013\015\024\016\025" +
    "\011\026\021\027\020\030\023\031\027\032\017\033\022" +
    "\034\030\035\012\001\002\000\042\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\013\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\001\002\000\050\003\057\004\043\006\010\007\025" +
    "\010\024\013\052\015\047\024\016\025\011\026\021\027" +
    "\020\030\023\031\027\032\017\033\022\034\030\035\012" +
    "\036\045\040\055\001\002\000\012\017\uffc6\020\065\023" +
    "\uffc6\036\uffc6\001\002\000\042\004\043\006\010\007\025" +
    "\010\024\024\016\025\011\026\021\027\020\030\023\031" +
    "\027\032\017\033\022\034\030\035\012\036\145\040\055" +
    "\001\002\000\012\016\125\020\065\023\124\036\uffc4\001" +
    "\002\000\050\003\uffd9\004\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\013\uffd9\015\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\040\uffd9\001\002\000\052\002\ufff7\003\ufff7\004\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\013\ufff7\015\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\040\ufff7\001\002\000\004\036\117" +
    "\001\002\000\006\014\113\022\114\001\002\000\044\004" +
    "\043\006\010\007\025\010\024\013\052\024\016\025\011" +
    "\026\021\027\020\030\023\031\027\032\017\033\022\034" +
    "\030\035\012\036\071\040\055\001\002\000\004\015\070" +
    "\001\002\000\050\003\uffda\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\013\uffda\015\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\040\uffda\001\002\000\012\017\uffc8\020\065\023\uffc8" +
    "\036\uffc8\001\002\000\050\003\057\004\043\006\010\007" +
    "\025\010\024\013\052\015\uffdc\024\016\025\011\026\021" +
    "\027\020\030\023\031\027\032\017\033\022\034\030\035" +
    "\012\036\045\040\055\001\002\000\050\003\uffd6\004\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\013\uffd6\015\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\040\uffd6\001\002\000\050\003" +
    "\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\013\uffd8\015\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\001\002" +
    "\000\050\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\013" +
    "\uffd7\015\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\001\002\000\050\003\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\013\uffdb\015\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\040\uffdb\001\002\000\004\015\uffdd\001\002\000" +
    "\010\017\uffc7\023\uffc7\036\uffc7\001\002\000\004\021\066" +
    "\001\002\000\012\017\uffc1\020\065\023\uffc1\036\uffc1\001" +
    "\002\000\010\017\uffc2\023\uffc2\036\uffc2\001\002\000\052" +
    "\002\ufff8\003\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\013" +
    "\ufff8\015\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\040" +
    "\ufff8\001\002\000\010\016\076\020\065\036\uffc4\001\002" +
    "\000\050\003\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\013" +
    "\uffbe\015\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\040" +
    "\uffbe\001\002\000\050\003\uffc9\004\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\013\uffc9\015\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\040\uffc9\001\002\000\052\002\ufff6\003\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\013\ufff6\015\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\001\002\000\006" +
    "\014\uffba\022\uffba\001\002\000\014\004\043\013\101\017" +
    "\100\036\103\040\055\001\002\000\010\017\uffc3\023\uffc3" +
    "\036\uffc3\001\002\000\006\014\uffb9\022\uffb9\001\002\000" +
    "\012\004\043\013\101\036\103\040\055\001\002\000\010" +
    "\017\uffb4\023\uffb4\036\111\001\002\000\012\017\uffc4\020" +
    "\065\023\uffc4\036\uffc4\001\002\000\006\017\107\023\106" +
    "\001\002\000\006\017\uffb6\023\uffb6\001\002\000\012\004" +
    "\043\013\101\036\103\040\055\001\002\000\006\014\uffb8" +
    "\022\uffb8\001\002\000\006\017\uffb7\023\uffb7\001\002\000" +
    "\006\017\uffb5\023\uffb5\001\002\000\006\017\uffb3\023\uffb3" +
    "\001\002\000\004\015\116\001\002\000\050\003\uffbf\004" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\015\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\001\002\000\050" +
    "\003\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\015" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\001" +
    "\002\000\050\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\013\uffb2\015\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\040\uffb2\001\002\000\010\016\076\022\120\037\121\001" +
    "\002\000\050\003\uffca\004\uffca\006\uffca\007\uffca\010\uffca" +
    "\013\uffca\015\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\040\uffca\001\002\000\004\022\123\001\002\000\006\014" +
    "\uffbb\022\uffbb\001\002\000\050\003\uffcb\004\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\013\uffcb\015\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\040\uffcb\001\002\000\004\036\140\001" +
    "\002\000\014\004\043\013\101\017\126\036\103\040\055" +
    "\001\002\000\010\014\uffb9\022\uffb9\023\127\001\002\000" +
    "\004\036\131\001\002\000\050\003\uffd0\004\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\013\uffd0\015\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\040\uffd0\001\002\000\004\016\132\001" +
    "\002\000\004\017\133\001\002\000\006\022\135\023\134" +
    "\001\002\000\004\036\131\001\002\000\050\003\uffce\004" +
    "\uffce\006\uffce\007\uffce\010\uffce\013\uffce\015\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\040\uffce\001\002\000\050" +
    "\003\uffcf\004\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\015" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\001" +
    "\002\000\050\003\uffd5\004\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\013\uffd5\015\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\040\uffd5\001\002\000\054\003\uffd1\004\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\013\uffd1\015\uffd1\022\142\023\141\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\001\002\000\050" +
    "\003\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\015" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\001" +
    "\002\000\050\003\uffd2\004\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\013\uffd2\015\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\001\002\000\050\003\uffd4\004\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\013\uffd4\015\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\040\uffd4\001\002\000\042\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\040\ufff1\001\002\000\010\016\076\020\065\036\uffc4\001" +
    "\002\000\004\036\150\001\002\000\004\036\ufff3\001\002" +
    "\000\010\016\076\022\151\037\152\001\002\000\050\003" +
    "\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\013\uffcc\015\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\001\002" +
    "\000\004\022\154\001\002\000\006\014\uffbd\022\uffbd\001" +
    "\002\000\050\003\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\013\uffcd\015\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\040\uffcd\001\002\000\006\014\uffbc\022\uffbc\001\002\000" +
    "\010\017\uffc5\023\uffc5\036\uffc5\001\002\000\036\006\ufffe" +
    "\007\ufffe\010\ufffe\013\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\001\002\000\010\011\161\012\162\014\ufff4\001\002\000" +
    "\004\036\170\001\002\000\004\036\165\001\002\000\004" +
    "\014\ufff5\001\002\000\006\014\uffe0\023\166\001\002\000" +
    "\006\014\uffde\023\uffde\001\002\000\004\036\167\001\002" +
    "\000\006\014\uffdf\023\uffdf\001\002\000\006\012\171\014" +
    "\uffe1\001\002\000\004\036\165\001\002\000\006\014\uffe2" +
    "\023\166\001\002\000\042\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\013\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\171\000\026\002\032\003\031\004\013\005\034\006" +
    "\033\010\025\016\012\017\006\024\003\025\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\146\024" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\156\004\013\001\001\000\016\006\073\010\025\016\012" +
    "\017\006\024\003\025\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\037\006\033\010\025\016" +
    "\012\017\006\024\003\025\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\035\010\025\016\012\017" +
    "\006\024\003\025\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\035\010\025\016\012\017\006\024" +
    "\003\025\005\001\001\000\002\001\001\000\036\006\061" +
    "\010\025\011\052\012\050\014\055\015\057\016\012\017" +
    "\006\022\053\023\045\024\003\025\043\026\047\033\060" +
    "\001\001\000\004\007\155\001\001\000\010\016\146\024" +
    "\143\026\145\001\001\000\006\007\076\027\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\114\001\001\000\026\006\073\010\025\012\050" +
    "\016\012\017\006\022\072\023\071\024\003\025\043\026" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\063\001\001\000\036\006\061\010\025\011\062\012" +
    "\050\014\055\015\057\016\012\017\006\022\053\023\045" +
    "\024\003\025\043\026\047\033\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\076\027\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\101\030\103\031\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\101\031\111\001\001\000\002" +
    "\001\001\000\004\007\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\101\031\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\136\001\001\000\010\026\101\030\103\031" +
    "\104\001\001\000\002\001\001\000\004\034\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\076\027\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\162\001\001\000\002\001\001\000" +
    "\004\020\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private JavaProjectTreeAdapter ptBuilder;
    private JavaLexer lexer;

    public ProjectTreeAdapter getTreeBuilder() {
        return ptBuilder;
    }

    public void setTreeBuilder(ProjectTreeAdapter ptBuilder) {
        this.ptBuilder = (JavaProjectTreeAdapter) ptBuilder;
    }

    public void setLexer(JavaLexer lexer) {
        this.lexer = lexer;
    }

    public JavaLexer getLexer() {
        return lexer;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaParser$actions {
  private final JavaParser parser;

  /** Constructor */
  CUP$JavaParser$actions(JavaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action_part00000000(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaParser$parser.done_parsing();
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= imports classList
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= classList
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // imports ::= singleImport imports
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // imports ::= singleImport
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("imports",1, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // singleImport ::= IMPORT SEMICOLON
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    String[] importPath = i.split(" ");
                    String classPath = importPath[importPath.length - 1];
                    ptBuilder.searchOrCreateClass(classPath);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("singleImport",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // singleImport ::= PACKAGE SEMICOLON
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    String[] packagePath = p.split(" ");
                    String packageName = packagePath[packagePath.length - 1];
                    ptBuilder.searchOrCreatePackage(packageName, true);
                    ptBuilder.addClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("singleImport",2, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classList ::= classList javaClass
            {
              Object RESULT =null;

                    ptBuilder.addClassToCurrentPackage();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classList",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classList ::= javaClass
            {
              Object RESULT =null;

                    ptBuilder.addClassToCurrentPackage();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classList",3, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // javaClass ::= header LBRACE body RBRACE
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("javaClass",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // javaClass ::= header LBRACE RBRACE
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("javaClass",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // javaClass ::= ANNOTATION javaClass
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("javaClass",4, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header ::= classDeclaration CLASSNAME classHierachy
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.setClassName(cn);
                    ptBuilder.searchClassOnCurrentPath(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("header",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= classDeclaration CLASSNAME
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.setClassName(cn);
                    ptBuilder.searchClassOnCurrentPath(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("header",6, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // classDeclaration ::= modifiers classType
            {
              Object RESULT =null;

                    if (!ptBuilder.getClassName().isEmpty())
                          ptBuilder.addClass();
                    ptBuilder.setDeclarationToCurrentClass();
                    ptBuilder.resetModifiers();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classDeclaration",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // classDeclaration ::= classType
            {
              Object RESULT =null;

                    if (!ptBuilder.getClassName().isEmpty())
                          ptBuilder.addClass();
                    ptBuilder.setDeclarationToCurrentClass();
                    ptBuilder.resetModifiers();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classDeclaration",13, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // modifiers ::= modifiers modifier
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifiers",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // modifiers ::= modifier
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifiers",19, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modifier ::= PUBLIC
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.PUBLIC);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // modifier ::= PROTECTED
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.PROTECTED);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // modifier ::= PRIVATE
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.PRIVATE);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // modifier ::= ABSTRACT
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.ABSTRACT);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modifier ::= STATIC
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.STATIC);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modifier ::= FINAL
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.FINAL);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modifier ::= SYNCHRONIZED
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.SYNCHRONIZED);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modifier ::= NATIVE
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.NATIVE);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // modifier ::= VOLATILE
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.VOLATILE);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modifier ::= TRANSIENT
            {
              Object RESULT =null;
		 ptBuilder.addModifier(ModifierType.TRANSIENT);
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("modifier",18, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // classType ::= CLASS
            {
              Object RESULT =null;
		 ptBuilder.isSimpleClass();
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classType",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classType ::= INTERFACE
            {
              Object RESULT =null;
		 ptBuilder.isInterface();
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classType",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classType ::= ENUM
            {
              Object RESULT =null;
		 ptBuilder.inEnum = true;
                              ptBuilder.isEnum();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classType",12, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // classHierachy ::= EXTENDS CLASSNAME IMPLEMENTS interfaceList
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;

                    ptBuilder.addClassSuperClass(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classHierachy",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // classHierachy ::= EXTENDS CLASSNAME
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.addClassSuperClass(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classHierachy",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // classHierachy ::= IMPLEMENTS interfaceList
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("classHierachy",15, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // interfaceList ::= interfaceList COMMA CLASSNAME
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.addClassInterface(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("interfaceList",14, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // interfaceList ::= CLASSNAME
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.addClassInterface(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("interfaceList",14, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= bodyContent body
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= bodyContent
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bodyContent ::= javaClass
            {
              Object RESULT =null;

                    ptBuilder.addInnerClassToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bodyContent ::= attribute
            {
              Object RESULT =null;

                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bodyContent ::= method
            {
              Object RESULT =null;

                    ptBuilder.addMethodToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bodyContent ::= bodyEnum
            {
              Object RESULT =null;

                    ptBuilder.inEnum = false;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bodyContent ::= bodyArgEnum
            {
              Object RESULT =null;

                    ptBuilder.inEnum = false;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bodyContent ::= error
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    System.out.println(e + "No valido");

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyContent",10, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bodyEnum ::= CLASSNAME COMMA bodyEnumTail
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyEnum",11, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bodyEnumTail ::= CLASSNAME COMMA bodyEnumTail
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyEnumTail",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bodyEnumTail ::= CLASSNAME COMMA
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyEnumTail",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bodyEnumTail ::= CLASSNAME SEMICOLON
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyEnumTail",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bodyEnumTail ::= CLASSNAME
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyEnumTail",24, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bodyArgEnum ::= CLASSNAME LPAREN RPAREN COMMA bodyArgEnumTail
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyArgEnum",25, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bodyArgEnumTail ::= CLASSNAME LPAREN RPAREN COMMA bodyArgEnumTail
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyArgEnumTail",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bodyArgEnumTail ::= CLASSNAME LPAREN RPAREN SEMICOLON
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.addAttributeToCurrentClass();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("bodyArgEnumTail",26, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // attribute ::= modifiers type CLASSNAME ATTVALUE SEMICOLON
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.addModifiersToAttribute();
                    ptBuilder.setAttributeName(cn);
                    ptBuilder.setAttributeValue(v);
                    ptBuilder.setAttributeType(tp);
                    ptBuilder.resetModifiers();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attribute",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // attribute ::= modifiers type CLASSNAME SEMICOLON
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.addModifiersToAttribute();
                    ptBuilder.setAttributeName(cn);
                    ptBuilder.setAttributeType(tp);
                    ptBuilder.resetModifiers();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attribute",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // attribute ::= type CLASSNAME ATTVALUE SEMICOLON
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.setAttributeValue(v);
                    ptBuilder.setAttributeType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attribute",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // attribute ::= type CLASSNAME SEMICOLON
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.setAttributeType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attribute",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // attribute ::= ANNOTATION attribute
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("attribute",16, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= TYPE
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = tp;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= TYPE brackets
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 RESULT = tp + "[]";
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= IMPORT
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = cn;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= IMPORT brackets
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 RESULT = cn + "[]";
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= CLASSNAME
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;
		 RESULT = cn;
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= CLASSNAME brackets
            {
              String RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		 RESULT = cn + "[]";
              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // brackets ::= LBRACKET RBRACKET brackets
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("brackets",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // brackets ::= LBRACKET RBRACKET
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("brackets",5, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // method ::= methodHeader methodBody
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("method",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // method ::= methodHeader SEMICOLON
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("method",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method ::= ANNOTATION method
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("method",17, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // methodHeader ::= modifiers type CLASSNAME parameters
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    if (!(ptBuilder.isAnInterface() || ptBuilder.isAnAbstract())){
                      lexer.yybegin(lexer.METHODBODY);
                      ptBuilder.bracketCount++;
                    }
                    ptBuilder.addModifiersToMethod();
                    ptBuilder.resetModifiers();
                    ptBuilder.setMethodName(cn);
                    ptBuilder.setMethodReturnType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("methodHeader",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // methodHeader ::= modifiers CLASSNAME parameters
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    if (!(ptBuilder.isAnInterface() || ptBuilder.isAnAbstract())){
                      lexer.yybegin(lexer.METHODBODY);
                      ptBuilder.bracketCount++;
                    }
                    ptBuilder.addModifiersToMethod();
                    ptBuilder.resetModifiers();
                    ptBuilder.setMethodName(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("methodHeader",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // methodHeader ::= type CLASSNAME parameters
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    if (!ptBuilder.isAnInterface()){
                      lexer.yybegin(lexer.METHODBODY);
                      ptBuilder.bracketCount++;
                    }
                    ptBuilder.setMethodName(cn);
                    ptBuilder.setMethodReturnType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("methodHeader",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // methodHeader ::= CLASSNAME parameters
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;

                    if (!ptBuilder.isAnInterface()){
                      lexer.yybegin(lexer.METHODBODY);
                      ptBuilder.bracketCount++;
                    }
                    ptBuilder.setMethodName(cn);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("methodHeader",8, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameters ::= LPAREN RPAREN
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameters",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameters ::= LPAREN parameterList RPAREN
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameters",21, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameterList ::= parameterList COMMA parameter
            {
              Object RESULT =null;

                    ptBuilder.addMethodParameter();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameterList",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameterList ::= parameter
            {
              Object RESULT =null;

                    ptBuilder.addMethodParameter();

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameterList",22, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter ::= type CLASSNAME
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String cn = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.setAttributeName(cn);
                    ptBuilder.setAttributeType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter ::= type
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$JavaParser$stack.peek()).value;

                    ptBuilder.setAttributeType(tp);

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameter ::= ANNOTATION parameter
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("parameter",23, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // methodBody ::= LBRACE RBRACE
            {
              Object RESULT =null;

              CUP$JavaParser$result = parser.getSymbolFactory().newSymbol("methodBody",9, ((java_cup.runtime.Symbol)CUP$JavaParser$stack.elementAt(CUP$JavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaParser$stack.peek()), RESULT);
            }
          return CUP$JavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaParser$do_action(
    int                        CUP$JavaParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaParser$parser,
    java.util.Stack            CUP$JavaParser$stack,
    int                        CUP$JavaParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaParser$do_action_part00000000(
                               CUP$JavaParser$act_num,
                               CUP$JavaParser$parser,
                               CUP$JavaParser$stack,
                               CUP$JavaParser$top);
    }
}

}
