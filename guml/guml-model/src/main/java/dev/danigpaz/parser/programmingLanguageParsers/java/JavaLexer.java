// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/javaLex.flex

package dev.danigpaz.parser.programmingLanguageParsers.java;

import java_cup.runtime.*;
import dev.danigpaz.parser.ProjectTreeAdapter;
import dev.danigpaz.parser.ProgrammingLanguageLexer;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class JavaLexer implements ProgrammingLanguageLexer, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int METHODBODY = 2;
  public static final int ENUMINSTANCE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\3\0\1\5"+
    "\3\0\1\6\1\7\1\10\1\0\1\11\1\0\1\12"+
    "\1\13\12\14\1\0\1\15\1\5\1\16\1\5\1\0"+
    "\1\17\22\20\1\21\7\20\1\22\1\0\1\23\1\0"+
    "\1\20\1\0\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\20\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\20\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\0\1\55\7\0"+
    "\1\3\32\0\1\3\u01df\0\1\3\177\0\13\3\35\0"+
    "\2\3\5\0\1\3\57\0\1\3\240\0\1\3\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\3\1\4\1\2\1\5\1\6\1\7"+
    "\1\5\1\10\1\2\1\11\2\2\1\5\1\12\1\13"+
    "\15\5\1\14\1\15\4\3\1\16\1\17\2\20\1\21"+
    "\1\22\2\20\3\0\1\5\1\0\1\3\1\1\1\23"+
    "\30\5\2\3\1\20\1\3\3\0\14\5\1\24\15\5"+
    "\1\3\1\20\1\3\1\23\2\5\1\24\2\5\1\25"+
    "\20\5\1\3\2\5\1\26\1\5\1\27\23\5\1\30"+
    "\3\5\1\31\1\32\5\5\1\33\1\5\1\0\2\5"+
    "\1\34\2\5\1\0\2\5\1\35\1\5\3\36\1\5"+
    "\1\0\2\5\2\3\1\5\1\37\1\5\1\0\2\36"+
    "\1\40\2\41\1\42\1\5\2\0\1\43\1\44\1\36"+
    "\1\0\1\41\1\5\1\3\1\36\1\5\1\36\1\45"+
    "\1\36\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\346\0\u0114"+
    "\0\212\0\212\0\212\0\212\0\u0142\0\212\0\u0170\0\u019e"+
    "\0\u01cc\0\212\0\212\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\212\0\212\0\u0450\0\u047e\0\u04ac\0\u04da\0\212\0\212"+
    "\0\u0508\0\u0536\0\212\0\212\0\u0564\0\u0592\0\346\0\u0170"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0170\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844"+
    "\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\212\0\212\0\u1140\0\u116e\0\u0114\0\u119c\0\u11ca"+
    "\0\u0114\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u0508\0\u14d8\0\u1506\0\u0114\0\u1534\0\u0114\0\u1562"+
    "\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u1870\0\u189e\0\u0114\0\u18cc\0\u18fa\0\u1928\0\u0114\0\u0114"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u0114\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u0114\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac"+
    "\0\u0114\0\u1bda\0\u1c08\0\212\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u0114\0\u1da6\0\u1dd4\0\u1e02"+
    "\0\u1e30\0\u0114\0\u1e5e\0\212\0\u0114\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u0114\0\u0114\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1ee8\0\u1fce"+
    "\0\u1ffc\0\u202a\0\u0114\0\u2058\0\u2086\0\u20b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\4\1\15\1\10\1\16\1\17\1\20"+
    "\1\10\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\10\1\32\1\10\1\33\1\10\1\34"+
    "\1\10\1\35\1\10\1\36\1\37\1\10\1\40\4\10"+
    "\1\41\1\42\1\43\4\44\6\43\1\45\2\43\1\46"+
    "\35\43\1\47\1\50\1\51\4\52\1\51\1\53\1\54"+
    "\3\51\1\55\2\51\1\56\37\51\57\0\1\5\2\57"+
    "\1\5\11\0\1\60\40\0\4\57\11\0\1\60\44\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\30\10\12\0\1\63\2\0\1\64\42\0\15\65\1\0"+
    "\40\65\20\0\2\66\2\0\30\66\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\21\10\1\67"+
    "\6\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\1\10\1\70\26\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\15\10\1\71"+
    "\10\10\1\72\1\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\7\10\1\73\2\10\1\74"+
    "\15\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\15\10\1\75\12\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\14\10\1\76"+
    "\10\10\1\77\2\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\10\10\1\100\1\10\1\101"+
    "\15\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\13\10\1\102\1\103\13\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\15\10"+
    "\1\104\12\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\1\105\27\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\1\106\16\10"+
    "\1\107\2\10\1\110\5\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\7\10\1\111\11\10"+
    "\1\112\4\10\1\113\1\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\7\10\1\114\7\10"+
    "\1\115\10\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\15\10\1\116\12\10\2\0\54\43"+
    "\2\0\1\43\4\44\11\43\1\46\35\43\2\0\10\43"+
    "\1\117\2\43\1\120\40\43\2\0\15\46\1\43\36\46"+
    "\2\65\6\51\2\0\47\51\4\52\1\51\2\0\6\51"+
    "\1\56\45\51\2\0\1\121\2\51\1\122\42\51\6\56"+
    "\2\65\5\56\1\51\40\56\5\0\1\10\2\0\1\13"+
    "\3\0\1\10\3\0\2\10\2\0\30\10\14\0\1\61"+
    "\7\0\2\62\32\0\10\63\1\123\45\63\2\64\1\0"+
    "\53\64\1\0\4\124\1\0\1\125\5\0\1\66\3\0"+
    "\2\66\2\0\30\66\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\17\10\1\126\10\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\20\10\1\127\7\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\15\10\1\130\12\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\21\10\1\131\6\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\1\132\27\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\1\133"+
    "\27\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\22\10\1\134\5\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\22\10\1\135"+
    "\5\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\21\10\1\136\6\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\14\10\1\137"+
    "\13\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\15\10\1\140\12\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\16\10\1\141"+
    "\11\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\21\10\1\142\6\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\14\10\1\143"+
    "\13\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\21\10\1\144\6\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\2\10\1\145"+
    "\25\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\10\10\1\146\4\10\1\147\12\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\1\10\1\150\26\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\15\10\1\151\12\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\1\152\27\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\14\10\1\153\13\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\17\10"+
    "\1\154\10\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\1\155\27\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\10\10\1\156"+
    "\1\10\1\157\15\10\2\0\10\117\1\160\43\117\2\63"+
    "\2\120\1\43\51\120\2\64\6\121\2\63\1\161\45\121"+
    "\2\122\1\51\3\122\2\64\46\122\13\63\1\162\42\63"+
    "\1\0\4\124\1\0\1\125\47\0\7\125\1\163\46\125"+
    "\5\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\10\10\1\104\17\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\21\10\1\164\6\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\12\10\1\165\15\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\4\10\1\166\23\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\17\10\1\166\10\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\20\10\1\167\7\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\1\10\1\170\26\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\13\10\1\171\14\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\4\10\1\172\23\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\1\173\27\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\1\174\27\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\12\10\1\175\2\10\1\176\12\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\4\10\1\177\23\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\6\10\1\166\21\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\10\10\1\200\17\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\11\10\1\201\16\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\23\10\1\202\4\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\21\10\1\203\6\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\12\10\1\204\15\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\17\10\1\174\10\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\21\10\1\205\6\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\2\10\1\206\25\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\15\10\1\207\12\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\14\10\1\210\13\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\3\10\1\166\24\10\7\0\1\10\4\0\1\61"+
    "\1\0\1\10\3\0\2\10\2\62\1\211\27\10\2\0"+
    "\13\117\1\43\40\117\2\63\6\121\2\63\3\121\1\212"+
    "\42\121\5\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\17\10\1\213\10\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\4\10\1\214"+
    "\23\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\20\10\1\215\7\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\12\10\1\131"+
    "\15\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\14\10\1\216\13\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\12\10\1\217"+
    "\15\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\21\10\1\166\6\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\4\10\1\220"+
    "\23\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\17\10\1\221\10\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\17\10\1\222"+
    "\10\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\23\10\1\223\4\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\1\224\27\10"+
    "\7\0\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\1\225\27\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\4\10\1\226\23\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\10\10\1\227\17\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\10\10\1\230\17\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\7\10\1\231\20\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\24\10\1\232\3\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\20\10\1\233\7\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\21\10\1\234\6\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\1\235\27\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\1\236\27\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\3\10\1\237"+
    "\24\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\13\10\1\240\14\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\21\10\1\241"+
    "\6\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\5\10\1\242\22\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\4\10\1\243"+
    "\23\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\6\10\1\244\21\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\21\10\1\245"+
    "\6\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\2\10\1\246\25\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\2\10\1\247"+
    "\25\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\2\10\1\250\25\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\17\10\1\251"+
    "\10\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\20\10\1\252\7\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\10\10\1\253"+
    "\17\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\10\10\1\254\17\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\2\10\1\255"+
    "\25\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\14\10\1\166\13\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\20\10\1\256"+
    "\7\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\4\10\1\257\23\10\3\0\1\260\2\0"+
    "\1\260\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\30\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\1\261\27\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\4\10\1\262"+
    "\23\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\4\10\1\263\23\10\7\0\1\10\4\0"+
    "\1\61\1\0\1\10\3\0\2\10\2\62\21\10\1\264"+
    "\6\10\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\15\10\1\265\12\10\3\0\1\266\2\0"+
    "\1\266\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\30\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\4\10\1\267\23\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\12\10"+
    "\1\270\15\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\21\10\1\271\6\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\14\10"+
    "\1\272\13\10\3\0\1\260\2\0\1\260\1\273\2\0"+
    "\1\274\3\0\1\273\3\0\2\273\2\0\20\273\1\275"+
    "\7\273\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\2\10\1\276\25\10\3\0\1\277\2\0"+
    "\1\277\1\10\4\0\1\61\1\0\1\10\3\0\2\10"+
    "\2\62\30\10\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\4\10\1\300\23\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\14\10"+
    "\1\301\13\10\3\0\1\266\2\0\1\266\1\302\2\0"+
    "\1\303\3\0\1\302\3\0\2\302\2\0\30\302\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\14\10\1\304\13\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\4\10\1\305\23\10\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\21\10\1\306\6\10\7\0\1\273\4\0\1\307\1\0"+
    "\1\273\3\0\2\273\2\310\30\273\7\0\1\273\4\0"+
    "\1\307\1\0\1\273\3\0\2\273\2\310\21\273\1\311"+
    "\6\273\7\0\1\10\4\0\1\61\1\0\1\10\3\0"+
    "\2\10\2\62\4\10\1\312\23\10\3\0\1\277\2\0"+
    "\1\277\1\313\2\0\1\314\3\0\1\313\3\0\2\313"+
    "\2\0\30\313\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\3\10\1\315\24\10\7\0\1\10"+
    "\4\0\1\61\1\0\1\10\3\0\2\10\2\62\10\10"+
    "\1\316\17\10\7\0\1\302\2\0\1\303\1\317\1\320"+
    "\1\0\1\302\3\0\34\302\7\0\1\302\2\0\1\303"+
    "\1\317\2\0\1\302\3\0\2\302\2\0\30\302\7\0"+
    "\1\10\4\0\1\61\1\0\1\10\3\0\2\10\2\62"+
    "\21\10\1\321\6\10\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\20\10\1\322\7\10\7\0"+
    "\1\273\2\0\1\274\3\0\1\273\3\0\2\273\2\0"+
    "\30\273\14\0\1\307\7\0\2\310\37\0\1\273\4\0"+
    "\1\307\1\0\1\273\3\0\2\273\2\310\1\323\27\273"+
    "\7\0\1\313\4\0\1\324\1\0\1\313\3\0\2\313"+
    "\2\325\30\313\7\0\1\10\4\0\1\61\1\0\1\10"+
    "\3\0\2\10\2\62\27\10\1\326\6\0\1\327\56\0"+
    "\1\302\2\0\1\303\3\0\1\302\3\0\2\302\2\0"+
    "\30\302\7\0\1\273\4\0\1\307\1\0\1\273\3\0"+
    "\2\273\2\310\21\273\1\330\6\273\7\0\1\313\2\0"+
    "\1\314\3\0\1\313\3\0\2\313\2\0\30\313\14\0"+
    "\1\324\7\0\2\325\37\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\4\10\1\331\23\10\7\0"+
    "\1\273\4\0\1\307\1\0\1\273\3\0\2\273\2\310"+
    "\10\273\1\332\17\273\7\0\1\10\4\0\1\61\1\0"+
    "\1\10\3\0\2\10\2\62\3\10\1\333\24\10\7\0"+
    "\1\273\4\0\1\307\1\0\1\273\3\0\2\273\2\310"+
    "\2\273\1\334\25\273\6\0\1\335\1\273\4\0\1\307"+
    "\1\0\1\273\3\0\2\273\2\310\30\273\3\0\1\336"+
    "\2\0\1\336\52\0\1\336\2\0\1\336\1\273\2\0"+
    "\1\274\3\0\1\273\3\0\2\273\2\0\30\273\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\4\1\4\11\1\1\1\11\3\1\2\11"+
    "\15\1\2\11\4\1\2\11\2\1\2\11\2\1\3\0"+
    "\1\1\1\0\37\1\3\0\34\1\2\11\74\1\1\0"+
    "\5\1\1\0\5\1\1\11\2\1\1\0\7\1\1\0"+
    "\4\1\1\11\2\1\2\0\3\1\1\0\10\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
        JavaProjectTreeAdapter treeBuilder;

        private Symbol symbol(int type) {
            return new Symbol(type, yyline, yycolumn);
        }

        private Symbol symbol(int type, Object value) {
            return new Symbol(type, yyline, yycolumn, value);
        }

        public ProjectTreeAdapter getTreeBuilder(){
            return treeBuilder;
        }

        public void setTreeBuilder(ProjectTreeAdapter ptBuilder){
            treeBuilder = (JavaProjectTreeAdapter) ptBuilder;
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(JavaParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(JavaParserSym.ATTVALUE, yytext());
            }
            // fall through
          case 38: break;
          case 2:
            { throw new Error("Illegal character <"+yytext()+">");
            }
            // fall through
          case 39: break;
          case 3:
            { /* ignore */
            }
            // fall through
          case 40: break;
          case 4:
            { yyline++; yycolumn = 0;
            }
            // fall through
          case 41: break;
          case 5:
            { return symbol(JavaParserSym.CLASSNAME, yytext());
            }
            // fall through
          case 42: break;
          case 6:
            { if(treeBuilder.inEnum) {
                      yybegin(ENUMINSTANCE);
                      treeBuilder.parenthesisCount++;
                    }
                    return symbol(JavaParserSym.LPAREN);
            }
            // fall through
          case 43: break;
          case 7:
            { return symbol(JavaParserSym.RPAREN);
            }
            // fall through
          case 44: break;
          case 8:
            { return symbol(JavaParserSym.COMMA);
            }
            // fall through
          case 45: break;
          case 9:
            { return symbol(JavaParserSym.SEMICOLON);
            }
            // fall through
          case 46: break;
          case 10:
            { return symbol(JavaParserSym.LBRACKET);
            }
            // fall through
          case 47: break;
          case 11:
            { return symbol(JavaParserSym.RBRACKET);
            }
            // fall through
          case 48: break;
          case 12:
            { if(treeBuilder.bracketCount > 0)
                        yybegin(METHODBODY);
                    return symbol(JavaParserSym.LBRACE);
            }
            // fall through
          case 49: break;
          case 13:
            { return symbol(JavaParserSym.RBRACE);
            }
            // fall through
          case 50: break;
          case 14:
            { treeBuilder.bracketCount++;
            }
            // fall through
          case 51: break;
          case 15:
            { treeBuilder.bracketCount--;
                    if (treeBuilder.bracketCount == 0) {
                        yybegin(YYINITIAL);
                        return symbol(JavaParserSym.RBRACE);
                    }
            }
            // fall through
          case 52: break;
          case 16:
            { 
            }
            // fall through
          case 53: break;
          case 17:
            { treeBuilder.parenthesisCount++;
            }
            // fall through
          case 54: break;
          case 18:
            { treeBuilder.parenthesisCount--;
                    if (treeBuilder.parenthesisCount == 0) {
                        yybegin(YYINITIAL);
                        return symbol(JavaParserSym.RPAREN);
                    }
            }
            // fall through
          case 55: break;
          case 19:
            { return symbol(JavaParserSym.ANNOTATION);
            }
            // fall through
          case 56: break;
          case 20:
            { return symbol(JavaParserSym.TYPE, yytext());
            }
            // fall through
          case 57: break;
          case 21:
            { return symbol(JavaParserSym.ENUM);
            }
            // fall through
          case 58: break;
          case 22:
            { return symbol(JavaParserSym.CLASS);
            }
            // fall through
          case 59: break;
          case 23:
            { return symbol(JavaParserSym.FINAL);
            }
            // fall through
          case 60: break;
          case 24:
            { return symbol(JavaParserSym.NATIVE);
            }
            // fall through
          case 61: break;
          case 25:
            { return symbol(JavaParserSym.PUBLIC);
            }
            // fall through
          case 62: break;
          case 26:
            { return symbol(JavaParserSym.STATIC);
            }
            // fall through
          case 63: break;
          case 27:
            { return symbol(JavaParserSym.EXTENDS);
            }
            // fall through
          case 64: break;
          case 28:
            { return symbol(JavaParserSym.PRIVATE);
            }
            // fall through
          case 65: break;
          case 29:
            { return symbol(JavaParserSym.ABSTRACT);
            }
            // fall through
          case 66: break;
          case 30:
            { return symbol(JavaParserSym.IMPORT, yytext());
            }
            // fall through
          case 67: break;
          case 31:
            { return symbol(JavaParserSym.VOLATILE);
            }
            // fall through
          case 68: break;
          case 32:
            { return symbol(JavaParserSym.INTERFACE);
            }
            // fall through
          case 69: break;
          case 33:
            { return symbol(JavaParserSym.PACKAGE, yytext());
            }
            // fall through
          case 70: break;
          case 34:
            { return symbol(JavaParserSym.PROTECTED);
            }
            // fall through
          case 71: break;
          case 35:
            { return symbol(JavaParserSym.TRANSIENT);
            }
            // fall through
          case 72: break;
          case 36:
            { return symbol(JavaParserSym.IMPLEMENTS);
            }
            // fall through
          case 73: break;
          case 37:
            { return symbol(JavaParserSym.SYNCHRONIZED);
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
